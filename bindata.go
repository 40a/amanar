// Code generated by go-bindata.
// sources:
// amanar_config_schema.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _amanar_config_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\x0c\x74\x5e\xb8\xf7\xdc\x82\x2e\x50\xa4\x1f\x97\xed\xa6\x40\x51\x2c\x8c\xb1\x38\xb2\x66\x41\x91\xea\x70\x18\xaf\x50\xe4\xbf\x17\x23\xc9\x96\x65\xc9\x89\x5b\xa4\x68\x0e\xb1\x44\x0d\x87\x33\xef\x3d\x3e\xf2\xaf\x3b\x80\x82\x95\x9a\x54\xdc\x83\xbd\x00\x14\x42\x7f\x66\x16\x72\xc5\x3d\xfc\xd1\x8f\x00\x14\x65\x0c\x15\xef\xb3\xe0\xce\x53\x2a\x3e\x1c\x87\x9f\x31\x7b\xdd\xb6\xa8\xf5\xe5\x98\x44\x4f\x45\x3f\xf4\x65\xf8\x52\x68\xd7\x52\x71\x0f\x45\xdc\x7d\xa5\x52\xc7\xf8\xa2\x95\xd8\x92\x28\xd3\x54\xc0\x3c\xef\x34\x0a\x50\x38\x4a\xa5\x70\xab\x1c\x83\xa5\xfa\x5c\x13\x58\x10\x08\xb5\x42\x89\x82\x72\xd8\x83\xd6\x04\x0e\x15\x93\x46\x21\xe0\xd0\x0f\xfc\x66\x19\x37\xa7\x2a\xcf\xea\x49\x2a\x1c\xf6\xc5\xf8\xe1\x65\xad\x8f\xb7\x6a\xb0\xa0\x65\x0d\x2d\x49\xc3\x29\x71\x0c\x09\xb4\x46\x05\x14\x82\x14\xf3\xbe\x56\xd0\x38\x55\x35\x15\xfb\x8f\xea\x9b\x53\x32\x2b\x71\x15\xea\xeb\x70\xf7\x5f\x38\x28\x79\xcf\x5f\xb7\x7d\x35\x31\x4b\xb9\x88\x59\x36\xff\xe0\x7d\x3c\x24\x78\x1c\xe6\xfe\x08\xd3\x5c\xc8\x89\x24\x60\x43\x09\x30\x38\x68\x31\xa5\x43\x14\x97\xac\xf3\x1d\x41\x59\x63\xd8\x93\xdb\xc0\x2f\x31\xa9\xc5\x56\xd9\x43\x15\x05\x3e\xa2\xe2\x0f\xc2\x6d\x3f\xcb\xd2\xed\x30\x51\x82\x03\x6b\xcd\x61\x5a\xe8\xc9\x2b\x37\xa8\x33\xc4\x86\x36\x66\x5a\x3e\xfb\xb0\xa2\xea\xf3\xbe\xc6\x95\xb6\x39\xb3\xbb\xc8\x79\x0a\x18\x3a\xdb\x56\xec\x69\xd0\xe6\x45\xd8\x97\xcb\x79\xd7\x89\x78\x8b\x8e\xd7\x56\x5d\x8b\x7c\x65\x6f\x68\x9c\xf3\x03\x23\xb9\x60\x19\x37\xf0\xb9\xe6\xe1\x11\x72\xca\xe8\x7d\x07\x9c\xc0\x88\x1b\xe0\xff\x75\x08\xde\xf8\x58\xa2\xdf\x7c\x6b\xfc\x25\xe2\x17\x9d\xce\xd5\x3a\xfd\xbd\xac\x60\xaa\x92\x93\x92\xdb\x62\xdb\x7a\x2e\xd1\x2a\x5f\xc7\x61\xd9\xdd\x63\xd5\xef\x9f\x9f\xa8\x2b\x6b\xe4\x00\x14\x54\x98\x12\x74\x31\xc3\x01\x43\xbf\xc1\x4a\x21\x54\x02\xf4\x42\xe8\x3a\xa0\x6f\x9c\xf4\x03\xa8\xf5\xcb\x09\x72\x08\x54\x52\x4a\x28\xdd\x06\x1e\xc0\x73\x52\x88\x15\x54\xd9\xfb\x1e\xb7\x5e\xa9\xe7\x95\xf5\xef\xa6\xf7\xf9\xca\xb6\x93\xad\x0f\x7b\x10\x72\xb9\xa4\xfe\x7b\xc8\xcd\x8e\xc4\x32\x9e\xdb\x40\x2b\xb1\x69\x35\x8d\xa8\xf7\xf4\xa4\x3a\x66\xef\x80\x82\x33\xab\xda\x60\xdb\x5e\x41\xf8\x9a\xb2\x6f\x24\x60\x95\x82\xb3\x79\x28\x82\xdd\x6d\xbc\xcd\x37\xcb\xed\x72\x9c\x76\xef\xd3\xe3\xc7\x7e\xb7\x1f\xad\xda\xb2\xcd\xb8\xcb\xad\xb3\xdd\x0d\xbf\xc7\x0c\x25\x06\xa8\x38\xb8\x81\xba\x9d\x31\x89\x0d\x87\x73\xab\x5f\xa8\x74\x10\xf7\xbf\x94\xea\xdd\x6b\xef\x17\x80\x5c\xc7\x6f\x16\x38\xd9\xab\xe4\xb0\x3d\x59\xf7\xba\xe4\xaf\xb8\xec\xe0\x99\xbd\x0e\x4f\x98\x61\x69\x1a\x36\xa9\x3b\x3b\x79\xd0\x9f\xac\x52\x72\x80\xf9\x3a\xef\xe5\x95\x14\x9e\x59\x62\x68\x28\xe8\xf6\x19\x85\xed\x00\x5a\xb3\xcc\x65\xa7\xdb\x2a\x7a\x47\x32\xbf\x30\x9c\xf7\x7d\x14\x56\x1d\x93\xfe\xf7\xee\xfa\x46\x81\xb7\x09\xfb\x01\x1c\x0b\x95\x1a\xa5\x33\xbc\x15\x07\x65\xa2\xf7\x93\xde\x97\x5c\x8c\xc7\xe0\xa0\x64\x3b\x07\x9f\x46\xf3\x35\x05\x2b\x0d\x5e\xc0\x8e\xf0\x3b\xc9\xe1\xfb\x39\x8d\xf0\x69\x99\xae\xc1\x0e\x02\x91\x1b\xf3\xa6\x1a\x85\x1c\xec\xa8\xb2\x2b\xd0\x8e\xca\xd8\x58\x51\xcf\x9c\x78\xe7\xc7\x3b\x91\xd9\x7e\xdf\xed\x3b\x3a\xfa\xaa\x34\x6e\x37\x88\xb3\xe9\x70\x9c\x7e\xbc\xc0\x2d\x30\x84\x1c\x1c\x09\x1c\x6a\x2e\xeb\xb9\x91\x94\xd1\xbc\xbd\x4f\xfc\x6e\x9d\xcd\xa5\x79\x7b\x4b\xc7\x6b\xd0\xec\x16\x74\xf2\xbe\xa7\x4f\x3f\xc3\x81\xbd\x87\x18\x7c\x67\xc4\x0d\xbe\xe7\x80\x87\xf3\xcd\x16\xb3\x33\xc4\xe2\x46\x1c\x56\x31\x6a\x50\xcb\xda\xac\xc1\x58\x1d\xda\xfa\x9f\xcd\xef\xee\xf2\x69\xf8\xb5\xff\x7d\x92\xcb\xa9\x2f\x77\x7f\x07\x00\x00\xff\xff\xe2\xb7\x88\x50\x8b\x0c\x00\x00")

func amanar_config_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_amanar_config_schemaJson,
		"amanar_config_schema.json",
	)
}

func amanar_config_schemaJson() (*asset, error) {
	bytes, err := amanar_config_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amanar_config_schema.json", size: 3211, mode: os.FileMode(420), modTime: time.Unix(1502653321, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"amanar_config_schema.json": amanar_config_schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"amanar_config_schema.json": &bintree{amanar_config_schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

