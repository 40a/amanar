// Code generated by go-bindata.
// sources:
// amanar_config_schema.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _amanar_config_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x53\x5b\x6e\xc2\x30\x10\xfc\xcf\x29\xac\xfd\xee\x09\xb8\x4a\x85\x2c\x93\x2c\x74\x91\xb1\xdd\xf5\x1a\x09\x55\xdc\xbd\x4a\x42\x9b\xd8\x38\x40\x51\xd5\xf2\x41\xe2\x7d\xcd\xec\x78\xf2\xd1\x28\x05\x24\x78\x88\xb0\x52\xfd\x41\x29\x60\x7c\x4f\xc4\xd8\xc1\x4a\xbd\x0e\x11\xa5\xa0\xf5\x6e\x4b\xbb\xc4\x66\x63\x31\xc2\xcb\x57\xf8\x68\x92\x15\x1d\x8c\xbc\x95\x31\xf6\x16\x61\x08\xad\xc7\x0c\xc8\x29\x20\xac\x14\xf8\xcd\x1e\x5b\xb9\xd4\x43\x60\x1f\x90\x85\x70\x22\x90\xcf\x9d\xa2\xb3\x19\x51\x98\xdc\x0e\x2e\x89\x73\x0d\xfb\x47\x7d\xf9\x7a\xd5\xd6\x8c\xf6\x32\xf5\x21\x43\x4e\xd0\x5a\xda\xeb\xce\x88\x89\x3e\x71\x7b\x55\x73\x25\xfb\x2c\x51\xb9\x80\x59\xb6\x9f\xb9\x31\x11\x75\x4a\xd4\xcd\xf8\x64\x05\x23\xa8\xde\x92\xc5\x51\xc6\xa2\x6c\x5d\xf6\x2d\xef\x79\x6f\xdb\x5b\xa8\xb5\xca\xc5\xeb\x98\x7e\xe7\xca\x56\xc2\x29\x0a\x76\xda\x84\x60\xa9\x35\x42\xde\xd5\x99\xdc\x50\xf6\x41\xf8\x2a\x81\x59\x9f\x61\x36\xa7\xc7\x58\xe7\x97\xf5\xac\x1c\xcd\xad\x73\x01\xbb\xcc\x32\x2b\x9c\x3c\xca\xc9\xe9\x6f\xff\xd7\x65\x7d\xd6\xaa\xe8\x8e\xc4\xde\x1d\xd0\x89\x3e\x1a\xa6\xfe\xf3\xaa\x39\xf6\x9a\x82\xde\x7a\xdb\x21\xff\x91\x77\xef\xe0\xff\xa2\x8b\xab\x8a\xfc\xb3\x2d\x9a\xf2\x6d\x7c\xf6\xff\xc3\x90\xb2\xf5\xdc\x7c\x06\x00\x00\xff\xff\x21\xfe\x5a\x21\x36\x06\x00\x00")

func amanar_config_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_amanar_config_schemaJson,
		"amanar_config_schema.json",
	)
}

func amanar_config_schemaJson() (*asset, error) {
	bytes, err := amanar_config_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amanar_config_schema.json", size: 1590, mode: os.FileMode(420), modTime: time.Unix(1502638089, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"amanar_config_schema.json": amanar_config_schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"amanar_config_schema.json": &bintree{amanar_config_schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

