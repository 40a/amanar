// Code generated by go-bindata.
// sources:
// amanar_config_schema.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _amanar_config_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x4d\x6f\xe4\x36\x0c\xbd\xe7\x57\x10\x3e\x2f\xa6\xc0\x1e\x73\x0b\x76\x81\x22\xed\x16\xe8\x7e\xa4\x40\x51\x2c\x06\x1c\x8b\x8e\xb9\x95\x25\x47\xa2\x32\x3b\x28\xf2\xdf\x0b\xca\x9e\xf1\xc7\x78\x92\x69\x30\x0b\x34\x87\xc4\x96\x29\x8a\x7c\x7c\x7c\x62\xfe\xb9\x02\x28\x58\xa8\x89\xc5\x35\xe8\x0b\x40\x11\xe8\x21\x71\x20\x53\x5c\xc3\x5f\x79\x05\xa0\x28\xbd\xab\xf8\x3e\x05\xdc\x58\x8a\xc5\x9b\xfd\xf2\x23\x26\x2b\xeb\x16\xa5\x9e\xaf\x05\x6f\xa9\xc8\x4b\x5f\xbb\x2f\x85\xec\x5a\x2a\xae\xa1\xf0\x9b\x6f\x54\x4a\x6f\x5f\xb4\xc1\xb7\x14\x84\x69\x08\x60\xea\x77\x58\x05\x28\x0c\xc5\x32\x70\x2b\xec\x9d\xba\xfa\x52\x13\xa8\x11\x04\x6a\x03\x45\x72\xc2\xee\x1e\xa4\x26\x30\x28\x18\xc5\x07\x02\x76\x79\xe1\x0f\xf5\xb8\x3a\x44\x39\x8a\x27\x4a\x60\x77\x5f\xf4\x1f\x9e\x96\xf2\x78\x29\x06\x35\x3a\x8e\xa1\xa5\xd0\x70\x8c\xec\x5d\x04\xa9\x51\x00\x03\x41\xf4\xe9\xbe\x16\x10\x3f\x44\x35\x04\xfb\x9f\xe2\x9b\x96\x64\x12\xe2\x22\xd4\xa7\xe1\xce\x5f\xd8\x09\x59\xcb\xdf\xd6\x39\x1a\x9f\x42\x79\x64\x73\x9c\xfc\x8d\xb5\x7e\x1b\xe1\xb6\xdb\xfb\x0b\x0c\x7b\x21\x45\x0a\x0e\x1b\x8a\x80\xce\x40\x8b\x31\x6e\x7d\x30\x51\x33\xdf\x10\x94\x35\xba\x7b\x32\x2b\xf8\xcd\x47\x51\xdb\x2a\x59\xa8\x7c\x80\xf7\x28\xf8\x73\xe0\x36\xef\x52\x77\x1b\x8c\x14\x61\xcb\x52\xb3\x1b\x0e\xba\xb3\xc2\x0d\xca\x04\xb1\x2e\x8d\x09\x97\x47\x1f\x16\x58\x3d\xce\xab\x3f\x69\x9d\x12\x9b\x99\xcf\x83\x41\x97\xd9\xba\x62\x4b\x1d\x37\x67\x66\x5f\xe7\xfb\x4e\x17\xe2\xa5\x72\x3c\x77\xea\x92\xe5\x33\xbd\x21\x7e\x5a\x1f\xe8\x8b\x0b\xea\x71\x05\x5f\x6a\xee\x1e\x21\xc5\x84\xd6\xee\x80\x23\x68\xe1\x3a\xf8\x3f\x77\xc6\x2b\xeb\x4b\xb4\xab\xef\x8d\x9d\x23\x3e\xcb\x74\xca\xd6\xe1\xe7\x69\x01\x53\x09\x29\x0a\x99\x35\xb6\xad\xe5\x12\x35\xf2\x65\x1c\x8e\xb3\xbb\xad\x72\xff\xfc\x4a\xbb\xb2\x46\x76\x40\x4e\x02\x53\x84\x9d\x4f\xb0\x45\x97\x1b\xac\x0c\x84\x42\x80\x36\x10\x9a\x1d\xd0\x77\x8e\xf2\x06\x44\xf3\xe5\x08\xc9\x39\x2a\x29\x46\x0c\xbb\x15\xdc\x80\xe5\x28\xe0\x2b\xa8\x92\xb5\x19\xb7\xcc\xd4\x71\x64\xf9\x5d\xf9\x3e\x3d\x59\x3b\x59\xf3\xd0\x87\x40\x26\x95\x94\xbf\xbb\xd4\x6c\x28\xa8\xc7\xb1\x0c\xb4\xc1\x37\xad\xc4\x1e\xf5\x5c\x9e\x58\xfb\x64\x0d\x90\x33\x2a\x55\x2b\x6c\xdb\x13\x08\x9f\x62\xf6\x99\x05\x58\x2c\xc1\x68\x1f\x86\x80\xbb\xf3\xea\x36\x6d\x96\xf3\xe9\x38\x74\xef\xdd\xed\xfb\xdc\xed\x7b\xa9\x56\x6f\x93\xda\xa5\xd6\x68\x77\xc3\x9f\x3e\x41\x89\x0e\x2a\x76\xa6\x2b\xdd\x46\x2b\x89\x0d\xbb\xb1\xd4\x1f\xb1\xb4\x23\xf7\x2b\xa9\x7a\xf5\xdc\xfb\x0c\x90\xd3\xf8\x4d\x0c\x07\x79\x0d\xc9\xad\x0f\xd2\xbd\x4c\xf9\x13\x2a\xdb\x69\x66\xe6\xe1\x01\x33\x2c\x95\xc3\x4a\x75\xa3\x37\x0f\xda\x63\xa9\x0c\xc9\xc1\xf4\xc0\x4b\x89\x26\xb9\x47\x0e\xde\x35\xe4\x64\xfd\x88\x81\xf5\x26\x5a\xd2\xce\xe3\x94\xd7\x95\xb7\x86\xc2\x74\x72\x18\x03\xb0\x67\x58\xed\xa3\xfc\x78\x99\x7d\x21\xc0\xf3\x18\x7e\x03\x86\x03\x95\xe2\xc3\x4e\xf1\x16\xec\x28\x8a\xd6\x3e\x57\x8b\xfe\x3e\xec\x28\xad\x17\xe2\x5d\xaf\xc2\x4a\x65\xa1\x4e\x14\xd8\x10\xfe\x14\x92\x7b\x37\x2d\x23\x7c\x3a\x76\xd7\xe0\x0e\x1c\x91\xe9\xfd\xc6\x1a\x03\x19\xd8\x50\xa5\xb3\xd0\x86\x4a\xdf\x68\x50\x8f\x1c\x79\x63\xfb\xe1\x48\xf5\x3f\x67\x7b\x41\x69\x5f\xa4\xc6\xf9\x4a\x31\xda\x0e\xfb\xed\xfb\x49\xee\x08\x43\x48\xce\x50\x80\x6d\xcd\x65\x3d\x55\x94\xd2\xab\xc8\x67\xc7\x17\xcb\x6c\x4a\xcd\xf3\x53\xda\xcf\x43\x93\x71\xe8\x20\x82\x77\x9f\x3e\xc0\x96\xad\x05\xef\xec\x4e\x0b\xd7\x09\xa0\x01\xee\x2e\x3a\x3d\x4c\x2f\x13\xb5\xeb\x71\x58\xc4\xa8\x41\x29\x6b\xd5\x08\xad\x6a\x97\xd6\xff\x49\x05\x1f\x12\x05\xf6\x29\xbe\x7d\xcd\x94\x79\xa6\xfe\x21\x7c\xec\x4f\x81\xb7\xf0\xf9\xe3\x07\x96\x81\x11\x97\x52\xbe\x21\x8f\xf8\x60\x59\xe8\x65\x21\xcb\x57\xe5\x0f\x17\xb2\xe5\xb8\xce\x23\xe9\xef\xfd\xb0\xa8\xdc\x9a\xc1\xa6\x94\xeb\xda\x6b\x04\x6d\xfe\x8f\x25\x02\x4b\xcc\x76\x17\x14\x8f\xd7\xce\x17\xc9\xf1\x43\x22\xe0\x4c\x85\x8a\x29\x1c\xda\xeb\x10\xf6\x21\xa3\xd1\x8c\xf1\x0e\x9d\x76\x5c\xe5\x93\x33\x3a\x5e\x58\xef\xff\x56\x91\xec\xfb\xec\x05\x0a\x9d\x9b\xe7\x85\xda\xe9\x6a\xfe\xd4\xfd\xd5\xdf\xd9\xc9\x7c\xeb\xd3\xd5\xbf\x01\x00\x00\xff\xff\xd5\x1e\x07\x3a\xe3\x0f\x00\x00")

func amanar_config_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_amanar_config_schemaJson,
		"amanar_config_schema.json",
	)
}

func amanar_config_schemaJson() (*asset, error) {
	bytes, err := amanar_config_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amanar_config_schema.json", size: 4067, mode: os.FileMode(420), modTime: time.Unix(1502767973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"amanar_config_schema.json": amanar_config_schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"amanar_config_schema.json": &bintree{amanar_config_schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

